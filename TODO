
-*- org -*-

* Open Issues
** I have a class with :initform for some slots.
   I want to make an instance of that class with a helper function. It
   seems that I need to duplicate the initforms as defaults to &key
   arguments of the helper function. Is there a way around this?
** There's class textattr, inherited by both label and textbox.
   How can I copy the textattr slots from label to

* DONE layout options for boxes
** DONE add layout options
** DONE tests for layout options (separate demos for vertical and horizontal)
** DONE update other tests to use layout options
* DONE button widget (events, mouse clicks, states);
* DONE scrollbar;
** DONE slider;
*** DONE horizontal
*** DONE vertical
** DONE arrow buttons
* DONE grid layout;
** DONE first cut;
** DONE add offsets on the cell arrangement DSL;
** DONE add column and row spans;
** DONE add row and column layout options (similar to boxes);
*** DONE first cut;
*** DONE move the grid into its own package (it has many helper functions)
*** DONE write some tests for the column/row layout options
** DONE change vertical and horizontal boxes to be one dimensional grids
   decided not to do it, boxes are faster
** DONE add aligner widgets that use a grid to align their child
   added a separate aligner widget - faster
* DONE change the helper macros from scenic-macros into functions;
  redefine the package and file to 'scenic-helpers'.
* DONE rename the helper functions in :scenic-helper to sane alternatives;
* DONE min/max controls (they force the min/max width/height for their child)
* DONE clipper class
* DONE refactor the measure-* and layout-* setting
  - add separate methods for them, don't call-next-method to do it;
  - factor the duplicated code for background and clipper into
    the measure/layout for container1
* DONE opacity class
* DONE grid processing - in the same order that the controls
  appeared in the lisp source (reverse the lists at the end of
  apply-children-descriptions)
* DONE canvas class (top/left/bottom/right/width/height positioning)
  called henchman
* TODO the paint method/event should have a 'paint rect'
  argument so that we now what we need to paint; this is necessary
  for datagrids and such, so that they don't paint themselves
  completely all the time.
* TODO scroll view;
** DONE first cut (no scrollbars integration)
** DONE add scrollbars (integrate them with a helper function)
** DONE scrollbars should disappear when not needed (enhance helper function)
** DONE hit-testing should work correctly with scroll views
** DONE when sending paint/mouse events to widgets within scroll views,
   the coordinates should be adjusted to match the ones in the
   layout-... slots of the widgets.
** TODO test with nested scroll-views
* DONE fix the scrollbar bug;
  When dragging, it is always assumed we are dragging the middle of
  the walker; we should drag according to the position of the mouse
  relative to the walker when the dragging started;
* DONE scrollbar bug;
  the walker should touch the right/bottom arrow if the current min
  pos + page size is max pos (maybe round the width/height up?)

  REPRO: see the scroll-view-1 test
  CANNOT REPRO.
* DONE fix the box layout bug
  (if there is not enough space, some elements are not measured; they
  should be measured with space 0)
* TODO org stuff
** TODO break the events into a separate package
** TODO break the containers into a separate package
** TODO break the tests into more suites
*** TODO move tests to separate folder
* TODO text box;
** DONE fix the focus (should 'cascade' and 'bubble' propagate key events,
   not just call the event on the widget that has focus))
** DONE clicking on the textbox should give it focus
   - textbox should inherit from clickable so it has the :click event
   - scene shoud have a 'focus-widget' method that transfers focus
     to a particular widget
** DONE when clicking on a textbox, the cursor position should be updated
** DONE "scrolling"
** DONE editing
** DONE bug: the caret should be pushed +0.5 px horizontally,
   unless it is on the rightmost margin, when it should be pushed -0.5px
** TODO when clicking on the textbox, place the cursor on
   the space between chars, not before the clicked char; i.e.,
   determine the space between chars closest to the click.
** DONE selection
*** DONE drawing, basic behavior
*** TODO clipboard interaction - xclip on X, what do I do on Windows?
* TODO add license information
* DONE use an .asd file (initial version from Orivej Desh)
* TODO popups/dialogs;
** TODO when a popup is hidden, the area underneath must be redrawn
   so the scene needs an additional slot, rectangles-to-redraw
   which will add to the dirty list
** TODO menubar/menu;
* TODO combo box;
* DONE checkbox/radio box;
* TODO themes/widget factories;
* TODO unit tests (e.g. for the grid layout)
  Make tests cheap (there is no code to be written, it's only
  necessary to redo the sequence of events and tell the test framework
  whether the test passed or failed). This way it doesn't matter so
  much if the tests are fragile (as in easily broken by changes to the
  interface).
** DONE naming of widgets (both explicit and automatic)
** DONE recording of input events
** DONE test channel where reactions to events are recorded
** DONE matching a recorded session of input events and
   reactions on the test channel with a 'blind' run of the input
   events (and new reactions on the test channel)
** TODO handling of asynchronous events (test channel replies
   can arrive in different orders); markup for the start of the async
   interval and the end? other ways to handle this.
* TODO optimization settings all in one place (reader macro with declaim?)
* TODO scenes have a name, the name of the scene is placed in the
  window title;
* TODO tree widget
* TODO datagrid widget
* TODO minesweeper and solitaire demos :-)
* DONE the focus event should be sent to the
  whole widget chain
* DONE bug: in the scroll view demos only the sliders are painted
  (after removing the idle render-scene stuff; probably need to add
  some "invalidate" calls)
* DONE see why the whole scene is repainted in scroll-view-mouse-adjust
  ... when I press the button in the left upper corner.

  Probably because the scroll-view itself is marked for
  repainting. Idea: widgets that don't do any painting (such as the
  scroll view) should not 'make dirty' the widgets they intersect
  with. The reason we need the scroll-view is that it takes care of
  displacing the button (which we need to repaint) and setting the
  clip rectangle correctly.
* DONE auto-testing fails because fonts are rendered with slightly different sizes
  on different systems.

  One solution is to use monospace by default and setup a list of
  acceptable dimensions. This means I'm not testing the actual font
  measuring code, but it will have to do for now.
* TODO interface with bordeaux-threads
** TODO animations? (with threads or simply with the idle event)
*** TODO use a thread with SLEEP to schedule animation events
** TODO so we can serialize thread based scenarios for automated testing
* TODO visibility for widgets
  - t or nil, if t the widget is measured and painted, if nil the
    widget has dimensions 0,0 and is not painted
** DONE update the grid to allow priority for :auto columns and rows layout options
** DONE update the boxes to allow priority for :auto layout options
   actually completely removed boxes
** DONE use the visibility to hide not needed scrollbars for scroll-view-auto
*** DONE add options to scroll-view-auto to specify whether scroll
*** DONE fix the bug: scroll-view-2:
    horizontal scrollbars should appear if they become necessary after
    adding the vertical scrollbar; likewise, vertical scrollbars
    should appear if they are required after adding the horizontal
    scrollbars.
* DONE BUG: all radio-buttons in a group can be unchecked
  (at least one radio button must be turned on)
* TODO add again the simple box layout (horizontal and vertical)
** TODO write some tests for simple boxes
* TODO add a dock panel layout
** TODO write tests for the dock panel layout
* TODO Glass
** TODO glass with opacity 0 is a special case: usable for popus/menus/dialogs
** TODO glass with 0 < opacity < 1 is a special case which
   invalidates the widgets it intersects and are *underneath* it.
